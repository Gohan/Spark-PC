// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScheduleMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ScheduleMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ScheduleMessage {

namespace {

const ::google::protobuf::Descriptor* ScheduleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScheduleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScheduleMessage_MessageBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScheduleMessage_MessageBody_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScheduleMessage_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BasicScheduleEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicScheduleEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BasicScheduleEvent_BasicEventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ScheduleMessage_2eproto() {
  protobuf_AddDesc_ScheduleMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ScheduleMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ScheduleMessage_descriptor_ = file->message_type(0);
  static const int ScheduleMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleMessage, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleMessage, msg_body_),
  };
  ScheduleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScheduleMessage_descriptor_,
      ScheduleMessage::default_instance_,
      ScheduleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScheduleMessage));
  ScheduleMessage_MessageBody_descriptor_ = ScheduleMessage_descriptor_->nested_type(0);
  static const int ScheduleMessage_MessageBody_offsets_[1] = {
  };
  ScheduleMessage_MessageBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScheduleMessage_MessageBody_descriptor_,
      ScheduleMessage_MessageBody::default_instance_,
      ScheduleMessage_MessageBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleMessage_MessageBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleMessage_MessageBody, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleMessage_MessageBody, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScheduleMessage_MessageBody));
  ScheduleMessage_MessageType_descriptor_ = ScheduleMessage_descriptor_->enum_type(0);
  BasicScheduleEvent_descriptor_ = file->message_type(1);
  static const int BasicScheduleEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicScheduleEvent, basic_event_type_),
  };
  BasicScheduleEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicScheduleEvent_descriptor_,
      BasicScheduleEvent::default_instance_,
      BasicScheduleEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicScheduleEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicScheduleEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicScheduleEvent));
  BasicScheduleEvent_BasicEventType_descriptor_ = BasicScheduleEvent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ScheduleMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScheduleMessage_descriptor_, &ScheduleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScheduleMessage_MessageBody_descriptor_, &ScheduleMessage_MessageBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicScheduleEvent_descriptor_, &BasicScheduleEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ScheduleMessage_2eproto() {
  delete ScheduleMessage::default_instance_;
  delete ScheduleMessage_reflection_;
  delete ScheduleMessage_MessageBody::default_instance_;
  delete ScheduleMessage_MessageBody_reflection_;
  delete BasicScheduleEvent::default_instance_;
  delete BasicScheduleEvent_reflection_;
}

void protobuf_AddDesc_ScheduleMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ScheduleMessage.proto\022\017ScheduleMessage"
    "\"\321\001\n\017ScheduleMessage\022>\n\010msg_type\030\001 \002(\0162,"
    ".ScheduleMessage.ScheduleMessage.Message"
    "Type\022>\n\010msg_body\030\002 \002(\0132,.ScheduleMessage"
    ".ScheduleMessage.MessageBody\032\027\n\013MessageB"
    "ody*\010\0102\020\200\200\200\200\002\"%\n\013MessageType\022\026\n\022BasicSch"
    "eduleEvent\0202\"\224\001\n\022BasicScheduleEvent\022L\n\020b"
    "asic_event_type\030\001 \001(\01622.ScheduleMessage."
    "BasicScheduleEvent.BasicEventType\"0\n\016Bas"
    "icEventType\022\016\n\nENTER_STEP\020\001\022\016\n\nLEAVE_STE"
    "P\020\002:o\n\024basic_schedule_event\022,.ScheduleMe"
    "ssage.ScheduleMessage.MessageBody\0302 \001(\0132"
    "#.ScheduleMessage.BasicScheduleEvent", 516);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ScheduleMessage.proto", &protobuf_RegisterTypes);
  ScheduleMessage::default_instance_ = new ScheduleMessage();
  ScheduleMessage_MessageBody::default_instance_ = new ScheduleMessage_MessageBody();
  BasicScheduleEvent::default_instance_ = new BasicScheduleEvent();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ScheduleMessage::ScheduleMessage_MessageBody::default_instance(),
    50, 11, false, false,
    &::ScheduleMessage::BasicScheduleEvent::default_instance());
  ScheduleMessage::default_instance_->InitAsDefaultInstance();
  ScheduleMessage_MessageBody::default_instance_->InitAsDefaultInstance();
  BasicScheduleEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ScheduleMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ScheduleMessage_2eproto {
  StaticDescriptorInitializer_ScheduleMessage_2eproto() {
    protobuf_AddDesc_ScheduleMessage_2eproto();
  }
} static_descriptor_initializer_ScheduleMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ScheduleMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScheduleMessage_MessageType_descriptor_;
}
bool ScheduleMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScheduleMessage_MessageType ScheduleMessage::BasicScheduleEvent;
const ScheduleMessage_MessageType ScheduleMessage::MessageType_MIN;
const ScheduleMessage_MessageType ScheduleMessage::MessageType_MAX;
const int ScheduleMessage::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ScheduleMessage_MessageBody::ScheduleMessage_MessageBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScheduleMessage_MessageBody::InitAsDefaultInstance() {
}

ScheduleMessage_MessageBody::ScheduleMessage_MessageBody(const ScheduleMessage_MessageBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScheduleMessage_MessageBody::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScheduleMessage_MessageBody::~ScheduleMessage_MessageBody() {
  SharedDtor();
}

void ScheduleMessage_MessageBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScheduleMessage_MessageBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScheduleMessage_MessageBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScheduleMessage_MessageBody_descriptor_;
}

const ScheduleMessage_MessageBody& ScheduleMessage_MessageBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScheduleMessage_2eproto();
  return *default_instance_;
}

ScheduleMessage_MessageBody* ScheduleMessage_MessageBody::default_instance_ = NULL;

ScheduleMessage_MessageBody* ScheduleMessage_MessageBody::New() const {
  return new ScheduleMessage_MessageBody;
}

void ScheduleMessage_MessageBody::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScheduleMessage_MessageBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((400u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ScheduleMessage_MessageBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [50, 536870912)
  _extensions_.SerializeWithCachedSizes(
      50, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScheduleMessage_MessageBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [50, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScheduleMessage_MessageBody::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScheduleMessage_MessageBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScheduleMessage_MessageBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScheduleMessage_MessageBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScheduleMessage_MessageBody::MergeFrom(const ScheduleMessage_MessageBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScheduleMessage_MessageBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleMessage_MessageBody::CopyFrom(const ScheduleMessage_MessageBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleMessage_MessageBody::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ScheduleMessage_MessageBody::Swap(ScheduleMessage_MessageBody* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ScheduleMessage_MessageBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScheduleMessage_MessageBody_descriptor_;
  metadata.reflection = ScheduleMessage_MessageBody_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ScheduleMessage::kMsgTypeFieldNumber;
const int ScheduleMessage::kMsgBodyFieldNumber;
#endif  // !_MSC_VER

ScheduleMessage::ScheduleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScheduleMessage::InitAsDefaultInstance() {
  msg_body_ = const_cast< ::ScheduleMessage::ScheduleMessage_MessageBody*>(&::ScheduleMessage::ScheduleMessage_MessageBody::default_instance());
}

ScheduleMessage::ScheduleMessage(const ScheduleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScheduleMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 50;
  msg_body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScheduleMessage::~ScheduleMessage() {
  SharedDtor();
}

void ScheduleMessage::SharedDtor() {
  if (this != default_instance_) {
    delete msg_body_;
  }
}

void ScheduleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScheduleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScheduleMessage_descriptor_;
}

const ScheduleMessage& ScheduleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScheduleMessage_2eproto();
  return *default_instance_;
}

ScheduleMessage* ScheduleMessage::default_instance_ = NULL;

ScheduleMessage* ScheduleMessage::New() const {
  return new ScheduleMessage;
}

void ScheduleMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 50;
    if (has_msg_body()) {
      if (msg_body_ != NULL) msg_body_->::ScheduleMessage::ScheduleMessage_MessageBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScheduleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ScheduleMessage.ScheduleMessage.MessageType msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScheduleMessage::ScheduleMessage_MessageType_IsValid(value)) {
            set_msg_type(static_cast< ::ScheduleMessage::ScheduleMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_body;
        break;
      }

      // required .ScheduleMessage.ScheduleMessage.MessageBody msg_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScheduleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ScheduleMessage.ScheduleMessage.MessageType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required .ScheduleMessage.ScheduleMessage.MessageBody msg_body = 2;
  if (has_msg_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScheduleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ScheduleMessage.ScheduleMessage.MessageType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required .ScheduleMessage.ScheduleMessage.MessageBody msg_body = 2;
  if (has_msg_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScheduleMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ScheduleMessage.ScheduleMessage.MessageType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required .ScheduleMessage.ScheduleMessage.MessageBody msg_body = 2;
    if (has_msg_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScheduleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScheduleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScheduleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScheduleMessage::MergeFrom(const ScheduleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_body()) {
      mutable_msg_body()->::ScheduleMessage::ScheduleMessage_MessageBody::MergeFrom(from.msg_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScheduleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleMessage::CopyFrom(const ScheduleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_body()) {
    if (!this->msg_body().IsInitialized()) return false;
  }
  return true;
}

void ScheduleMessage::Swap(ScheduleMessage* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_body_, other->msg_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScheduleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScheduleMessage_descriptor_;
  metadata.reflection = ScheduleMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BasicScheduleEvent_BasicEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicScheduleEvent_BasicEventType_descriptor_;
}
bool BasicScheduleEvent_BasicEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BasicScheduleEvent_BasicEventType BasicScheduleEvent::ENTER_STEP;
const BasicScheduleEvent_BasicEventType BasicScheduleEvent::LEAVE_STEP;
const BasicScheduleEvent_BasicEventType BasicScheduleEvent::BasicEventType_MIN;
const BasicScheduleEvent_BasicEventType BasicScheduleEvent::BasicEventType_MAX;
const int BasicScheduleEvent::BasicEventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BasicScheduleEvent::kBasicEventTypeFieldNumber;
#endif  // !_MSC_VER

BasicScheduleEvent::BasicScheduleEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BasicScheduleEvent::InitAsDefaultInstance() {
}

BasicScheduleEvent::BasicScheduleEvent(const BasicScheduleEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BasicScheduleEvent::SharedCtor() {
  _cached_size_ = 0;
  basic_event_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicScheduleEvent::~BasicScheduleEvent() {
  SharedDtor();
}

void BasicScheduleEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BasicScheduleEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicScheduleEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicScheduleEvent_descriptor_;
}

const BasicScheduleEvent& BasicScheduleEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScheduleMessage_2eproto();
  return *default_instance_;
}

BasicScheduleEvent* BasicScheduleEvent::default_instance_ = NULL;

BasicScheduleEvent* BasicScheduleEvent::New() const {
  return new BasicScheduleEvent;
}

void BasicScheduleEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    basic_event_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicScheduleEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScheduleMessage.BasicScheduleEvent.BasicEventType basic_event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScheduleMessage::BasicScheduleEvent_BasicEventType_IsValid(value)) {
            set_basic_event_type(static_cast< ::ScheduleMessage::BasicScheduleEvent_BasicEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicScheduleEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ScheduleMessage.BasicScheduleEvent.BasicEventType basic_event_type = 1;
  if (has_basic_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->basic_event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BasicScheduleEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ScheduleMessage.BasicScheduleEvent.BasicEventType basic_event_type = 1;
  if (has_basic_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->basic_event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BasicScheduleEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScheduleMessage.BasicScheduleEvent.BasicEventType basic_event_type = 1;
    if (has_basic_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->basic_event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicScheduleEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicScheduleEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicScheduleEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicScheduleEvent::MergeFrom(const BasicScheduleEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic_event_type()) {
      set_basic_event_type(from.basic_event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicScheduleEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicScheduleEvent::CopyFrom(const BasicScheduleEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicScheduleEvent::IsInitialized() const {

  return true;
}

void BasicScheduleEvent::Swap(BasicScheduleEvent* other) {
  if (other != this) {
    std::swap(basic_event_type_, other->basic_event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicScheduleEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicScheduleEvent_descriptor_;
  metadata.reflection = BasicScheduleEvent_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::ScheduleMessage::ScheduleMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::ScheduleMessage::BasicScheduleEvent >, 11, false >
  basic_schedule_event(kBasicScheduleEventFieldNumber, ::ScheduleMessage::BasicScheduleEvent::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace ScheduleMessage

// @@protoc_insertion_point(global_scope)
