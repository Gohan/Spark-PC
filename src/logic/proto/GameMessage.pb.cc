// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameMessage {

namespace {

const ::google::protobuf::Descriptor* GameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_MessageHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_MessageHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMessage_MessageBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_MessageBody_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameMessage_ClientType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Resource_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGamGeneralActionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGamGeneralActionNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerGamGeneralActionNotify_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerEnterGameNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEnterGameNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerChooseGameBoardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerChooseGameBoardReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerChooseGameBoardReq_Angle_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerChooseGameBoardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerChooseGameBoardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHarvestAreaUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHarvestAreaUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAuctionMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAuctionMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAuctionBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAuctionBroadcast_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameMessage_2eproto() {
  protobuf_AddDesc_GameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GameMessage_descriptor_ = file->message_type(0);
  static const int GameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, msg_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, msg_body_),
  };
  GameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMessage_descriptor_,
      GameMessage::default_instance_,
      GameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMessage));
  GameMessage_MessageHead_descriptor_ = GameMessage_descriptor_->nested_type(0);
  static const int GameMessage_MessageHead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageHead, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageHead, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageHead, body_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageHead, body_type_),
  };
  GameMessage_MessageHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMessage_MessageHead_descriptor_,
      GameMessage_MessageHead::default_instance_,
      GameMessage_MessageHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMessage_MessageHead));
  GameMessage_MessageBody_descriptor_ = GameMessage_descriptor_->nested_type(1);
  static const int GameMessage_MessageBody_offsets_[1] = {
  };
  GameMessage_MessageBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMessage_MessageBody_descriptor_,
      GameMessage_MessageBody::default_instance_,
      GameMessage_MessageBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageBody, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage_MessageBody, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMessage_MessageBody));
  GameMessage_ClientType_descriptor_ = GameMessage_descriptor_->enum_type(0);
  Resource_descriptor_ = file->message_type(1);
  static const int Resource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, count_),
  };
  Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource));
  Resource_Type_descriptor_ = Resource_descriptor_->enum_type(0);
  PlayerResource_descriptor_ = file->message_type(2);
  static const int PlayerResource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResource, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResource, resource_list_),
  };
  PlayerResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerResource_descriptor_,
      PlayerResource::default_instance_,
      PlayerResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerResource));
  PlayerGamGeneralActionNotify_descriptor_ = file->message_type(3);
  static const int PlayerGamGeneralActionNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGamGeneralActionNotify, type_),
  };
  PlayerGamGeneralActionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGamGeneralActionNotify_descriptor_,
      PlayerGamGeneralActionNotify::default_instance_,
      PlayerGamGeneralActionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGamGeneralActionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGamGeneralActionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGamGeneralActionNotify));
  PlayerGamGeneralActionNotify_Type_descriptor_ = PlayerGamGeneralActionNotify_descriptor_->enum_type(0);
  PlayerEnterGameNotify_descriptor_ = file->message_type(4);
  static const int PlayerEnterGameNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, player_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, card_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, food_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, resource_in_harvest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, resource_in_bank_),
  };
  PlayerEnterGameNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEnterGameNotify_descriptor_,
      PlayerEnterGameNotify::default_instance_,
      PlayerEnterGameNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEnterGameNotify));
  PlayerChooseGameBoardReq_descriptor_ = file->message_type(5);
  static const int PlayerChooseGameBoardReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardReq, gameboard_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardReq, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardReq, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardReq, angle_),
  };
  PlayerChooseGameBoardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerChooseGameBoardReq_descriptor_,
      PlayerChooseGameBoardReq::default_instance_,
      PlayerChooseGameBoardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerChooseGameBoardReq));
  PlayerChooseGameBoardReq_Angle_descriptor_ = PlayerChooseGameBoardReq_descriptor_->enum_type(0);
  PlayerChooseGameBoardNotify_descriptor_ = file->message_type(6);
  static const int PlayerChooseGameBoardNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardNotify, next_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardNotify, player_choose_),
  };
  PlayerChooseGameBoardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerChooseGameBoardNotify_descriptor_,
      PlayerChooseGameBoardNotify::default_instance_,
      PlayerChooseGameBoardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChooseGameBoardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerChooseGameBoardNotify));
  PlayerHarvestAreaUpdateNotify_descriptor_ = file->message_type(7);
  static const int PlayerHarvestAreaUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHarvestAreaUpdateNotify, resource_increasement_),
  };
  PlayerHarvestAreaUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHarvestAreaUpdateNotify_descriptor_,
      PlayerHarvestAreaUpdateNotify::default_instance_,
      PlayerHarvestAreaUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHarvestAreaUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHarvestAreaUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHarvestAreaUpdateNotify));
  PlayerAuctionMessageReq_descriptor_ = file->message_type(8);
  static const int PlayerAuctionMessageReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionMessageReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionMessageReq, auction_card_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionMessageReq, auction_is_giveup_),
  };
  PlayerAuctionMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAuctionMessageReq_descriptor_,
      PlayerAuctionMessageReq::default_instance_,
      PlayerAuctionMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAuctionMessageReq));
  PlayerAuctionBroadcast_descriptor_ = file->message_type(9);
  static const int PlayerAuctionBroadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionBroadcast, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionBroadcast, auction_card_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionBroadcast, auction_card_deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionBroadcast, auction_card_giveup_),
  };
  PlayerAuctionBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAuctionBroadcast_descriptor_,
      PlayerAuctionBroadcast::default_instance_,
      PlayerAuctionBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAuctionBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAuctionBroadcast));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMessage_descriptor_, &GameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMessage_MessageHead_descriptor_, &GameMessage_MessageHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMessage_MessageBody_descriptor_, &GameMessage_MessageBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerResource_descriptor_, &PlayerResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGamGeneralActionNotify_descriptor_, &PlayerGamGeneralActionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEnterGameNotify_descriptor_, &PlayerEnterGameNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerChooseGameBoardReq_descriptor_, &PlayerChooseGameBoardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerChooseGameBoardNotify_descriptor_, &PlayerChooseGameBoardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHarvestAreaUpdateNotify_descriptor_, &PlayerHarvestAreaUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAuctionMessageReq_descriptor_, &PlayerAuctionMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAuctionBroadcast_descriptor_, &PlayerAuctionBroadcast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameMessage_2eproto() {
  delete GameMessage::default_instance_;
  delete GameMessage_reflection_;
  delete GameMessage_MessageHead::default_instance_;
  delete GameMessage_MessageHead_reflection_;
  delete GameMessage_MessageBody::default_instance_;
  delete GameMessage_MessageBody_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete PlayerResource::default_instance_;
  delete PlayerResource_reflection_;
  delete PlayerGamGeneralActionNotify::default_instance_;
  delete PlayerGamGeneralActionNotify_reflection_;
  delete PlayerEnterGameNotify::default_instance_;
  delete PlayerEnterGameNotify_reflection_;
  delete PlayerChooseGameBoardReq::default_instance_;
  delete PlayerChooseGameBoardReq_reflection_;
  delete PlayerChooseGameBoardNotify::default_instance_;
  delete PlayerChooseGameBoardNotify_reflection_;
  delete PlayerHarvestAreaUpdateNotify::default_instance_;
  delete PlayerHarvestAreaUpdateNotify_reflection_;
  delete PlayerAuctionMessageReq::default_instance_;
  delete PlayerAuctionMessageReq_reflection_;
  delete PlayerAuctionBroadcast::default_instance_;
  delete PlayerAuctionBroadcast_reflection_;
}

void protobuf_AddDesc_GameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameMessage.proto\022\013GameMessage\"\313\002\n\013Gam"
    "eMessage\0226\n\010msg_head\030\001 \002(\0132$.GameMessage"
    ".GameMessage.MessageHead\0226\n\010msg_body\030\002 \002"
    "(\0132$.GameMessage.GameMessage.MessageBody"
    "\032~\n\013MessageHead\022\013\n\003seq\030\001 \002(\004\022<\n\013client_t"
    "ype\030\002 \002(\0162#.GameMessage.GameMessage.Clie"
    "ntType:\002PC\022\021\n\tbody_size\030\003 \002(\r\022\021\n\tbody_ty"
    "pe\030\004 \002(\r\032\027\n\013MessageBody*\010\0102\020\200\200\200\200\002\"3\n\nCli"
    "entType\022\006\n\002PC\020\001\022\007\n\003Web\020\002\022\013\n\007Android\020\003\022\007\n"
    "\003IOS\020\004\"\206\001\n\010Resource\022(\n\004type\030\001 \002(\0162\032.Game"
    "Message.Resource.Type\022\r\n\005count\030\002 \002(\r\"A\n\004"
    "Type\022\t\n\005Crops\020\000\022\013\n\007Berries\020\001\022\010\n\004Fish\020\002\022\t"
    "\n\005Bears\020\003\022\014\n\010Mammoths\020\004\"Q\n\016PlayerResourc"
    "e\022\021\n\tplayer_id\030\001 \002(\004\022,\n\rresource_list\030\002 "
    "\003(\0132\025.GameMessage.Resource\"\200\001\n\034PlayerGam"
    "GeneralActionNotify\022<\n\004type\030\001 \002(\0162..Game"
    "Message.PlayerGamGeneralActionNotify.Typ"
    "e\"\"\n\004Type\022\032\n\026ENTER_PREPARATION_STEP\020\000\"\315\001"
    "\n\025PlayerEnterGameNotify\022\024\n\014player_count\030"
    "\001 \002(\r\022\022\n\nplayer_ids\030\002 \003(\004\022\020\n\010card_ids\030\003 "
    "\003(\r\022\023\n\013food_tokens\030\004 \003(\r\0222\n\023resource_in_"
    "harvest\030\005 \003(\0132\025.GameMessage.Resource\022/\n\020"
    "resource_in_bank\030\006 \003(\0132\025.GameMessage.Res"
    "ource\"\337\001\n\030PlayerChooseGameBoardReq\022\021\n\tpl"
    "ayer_id\030\001 \002(\004\022\024\n\014gameboard_id\030\002 \002(\r\022\r\n\005p"
    "os_x\030\003 \002(\r\022\r\n\005pos_y\030\004 \002(\r\022:\n\005angle\030\005 \002(\016"
    "2+.GameMessage.PlayerChooseGameBoardReq."
    "Angle\"@\n\005Angle\022\006\n\002R0\020\000\022\007\n\003R60\020\001\022\010\n\004R120\020"
    "\002\022\010\n\004R180\020\003\022\010\n\004R240\020\004\022\010\n\004R300\020\005\"s\n\033Playe"
    "rChooseGameBoardNotify\022\026\n\016next_player_id"
    "\030\001 \001(\004\022<\n\rplayer_choose\030\002 \001(\0132%.GameMess"
    "age.PlayerChooseGameBoardReq\"U\n\035PlayerHa"
    "rvestAreaUpdateNotify\0224\n\025resource_increa"
    "sement\030\001 \003(\0132\025.GameMessage.Resource\"c\n\027P"
    "layerAuctionMessageReq\022\021\n\tplayer_id\030\001 \002("
    "\004\022\032\n\022auction_card_index\030\002 \002(\r\022\031\n\021auction"
    "_is_giveup\030\003 \001(\010\"\177\n\026PlayerAuctionBroadca"
    "st\022\021\n\tplayer_id\030\001 \002(\004\022\032\n\022auction_card_in"
    "dex\030\002 \002(\r\022\031\n\021auction_card_deal\030\003 \002(\010\022\033\n\023"
    "auction_card_giveup\030\004 \002(\010:j\n\030player_ente"
    "r_game_notify\022$.GameMessage.GameMessage."
    "MessageBody\030Z \001(\0132\".GameMessage.PlayerEn"
    "terGameNotify:u\n\034player_general_action_n"
    "otify\022$.GameMessage.GameMessage.MessageB"
    "ody\030[ \001(\0132).GameMessage.PlayerGamGeneral"
    "ActionNotify:p\n\033player_choose_gameboard_"
    "req\022$.GameMessage.GameMessage.MessageBod"
    "y\030\\ \001(\0132%.GameMessage.PlayerChooseGameBo"
    "ardReq:v\n\036player_choose_gameboard_notify"
    "\022$.GameMessage.GameMessage.MessageBody\030]"
    " \001(\0132(.GameMessage.PlayerChooseGameBoard"
    "Notify:{\n!player_harvest_area_update_not"
    "ify\022$.GameMessage.GameMessage.MessageBod"
    "y\030^ \001(\0132*.GameMessage.PlayerHarvestAreaU"
    "pdateNotify:n\n\032player_auction_message_re"
    "q\022$.GameMessage.GameMessage.MessageBody\030"
    "e \001(\0132$.GameMessage.PlayerAuctionMessage"
    "Req:k\n\030player_auction_broadcast\022$.GameMe"
    "ssage.GameMessage.MessageBody\030f \001(\0132#.Ga"
    "meMessage.PlayerAuctionBroadcast", 2392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMessage.proto", &protobuf_RegisterTypes);
  GameMessage::default_instance_ = new GameMessage();
  GameMessage_MessageHead::default_instance_ = new GameMessage_MessageHead();
  GameMessage_MessageBody::default_instance_ = new GameMessage_MessageBody();
  Resource::default_instance_ = new Resource();
  PlayerResource::default_instance_ = new PlayerResource();
  PlayerGamGeneralActionNotify::default_instance_ = new PlayerGamGeneralActionNotify();
  PlayerEnterGameNotify::default_instance_ = new PlayerEnterGameNotify();
  PlayerChooseGameBoardReq::default_instance_ = new PlayerChooseGameBoardReq();
  PlayerChooseGameBoardNotify::default_instance_ = new PlayerChooseGameBoardNotify();
  PlayerHarvestAreaUpdateNotify::default_instance_ = new PlayerHarvestAreaUpdateNotify();
  PlayerAuctionMessageReq::default_instance_ = new PlayerAuctionMessageReq();
  PlayerAuctionBroadcast::default_instance_ = new PlayerAuctionBroadcast();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::GameMessage::GameMessage_MessageBody::default_instance(),
    90, 11, false, false,
    &::GameMessage::PlayerEnterGameNotify::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::GameMessage::GameMessage_MessageBody::default_instance(),
    91, 11, false, false,
    &::GameMessage::PlayerGamGeneralActionNotify::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::GameMessage::GameMessage_MessageBody::default_instance(),
    92, 11, false, false,
    &::GameMessage::PlayerChooseGameBoardReq::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::GameMessage::GameMessage_MessageBody::default_instance(),
    93, 11, false, false,
    &::GameMessage::PlayerChooseGameBoardNotify::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::GameMessage::GameMessage_MessageBody::default_instance(),
    94, 11, false, false,
    &::GameMessage::PlayerHarvestAreaUpdateNotify::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::GameMessage::GameMessage_MessageBody::default_instance(),
    101, 11, false, false,
    &::GameMessage::PlayerAuctionMessageReq::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::GameMessage::GameMessage_MessageBody::default_instance(),
    102, 11, false, false,
    &::GameMessage::PlayerAuctionBroadcast::default_instance());
  GameMessage::default_instance_->InitAsDefaultInstance();
  GameMessage_MessageHead::default_instance_->InitAsDefaultInstance();
  GameMessage_MessageBody::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  PlayerResource::default_instance_->InitAsDefaultInstance();
  PlayerGamGeneralActionNotify::default_instance_->InitAsDefaultInstance();
  PlayerEnterGameNotify::default_instance_->InitAsDefaultInstance();
  PlayerChooseGameBoardReq::default_instance_->InitAsDefaultInstance();
  PlayerChooseGameBoardNotify::default_instance_->InitAsDefaultInstance();
  PlayerHarvestAreaUpdateNotify::default_instance_->InitAsDefaultInstance();
  PlayerAuctionMessageReq::default_instance_->InitAsDefaultInstance();
  PlayerAuctionBroadcast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameMessage_2eproto {
  StaticDescriptorInitializer_GameMessage_2eproto() {
    protobuf_AddDesc_GameMessage_2eproto();
  }
} static_descriptor_initializer_GameMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GameMessage_ClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_ClientType_descriptor_;
}
bool GameMessage_ClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameMessage_ClientType GameMessage::PC;
const GameMessage_ClientType GameMessage::Web;
const GameMessage_ClientType GameMessage::Android;
const GameMessage_ClientType GameMessage::IOS;
const GameMessage_ClientType GameMessage::ClientType_MIN;
const GameMessage_ClientType GameMessage::ClientType_MAX;
const int GameMessage::ClientType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameMessage_MessageHead::kSeqFieldNumber;
const int GameMessage_MessageHead::kClientTypeFieldNumber;
const int GameMessage_MessageHead::kBodySizeFieldNumber;
const int GameMessage_MessageHead::kBodyTypeFieldNumber;
#endif  // !_MSC_VER

GameMessage_MessageHead::GameMessage_MessageHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMessage_MessageHead::InitAsDefaultInstance() {
}

GameMessage_MessageHead::GameMessage_MessageHead(const GameMessage_MessageHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMessage_MessageHead::SharedCtor() {
  _cached_size_ = 0;
  seq_ = GOOGLE_ULONGLONG(0);
  client_type_ = 1;
  body_size_ = 0u;
  body_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_MessageHead::~GameMessage_MessageHead() {
  SharedDtor();
}

void GameMessage_MessageHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMessage_MessageHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_MessageHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_MessageHead_descriptor_;
}

const GameMessage_MessageHead& GameMessage_MessageHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameMessage_MessageHead* GameMessage_MessageHead::default_instance_ = NULL;

GameMessage_MessageHead* GameMessage_MessageHead::New() const {
  return new GameMessage_MessageHead;
}

void GameMessage_MessageHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = GOOGLE_ULONGLONG(0);
    client_type_ = 1;
    body_size_ = 0u;
    body_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMessage_MessageHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_type;
        break;
      }

      // required .GameMessage.GameMessage.ClientType client_type = 2 [default = PC];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::GameMessage_ClientType_IsValid(value)) {
            set_client_type(static_cast< ::GameMessage::GameMessage_ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_body_size;
        break;
      }

      // required uint32 body_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_size_)));
          set_has_body_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_body_type;
        break;
      }

      // required uint32 body_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_type_)));
          set_has_body_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameMessage_MessageHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seq(), output);
  }

  // required .GameMessage.GameMessage.ClientType client_type = 2 [default = PC];
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->client_type(), output);
  }

  // required uint32 body_size = 3;
  if (has_body_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->body_size(), output);
  }

  // required uint32 body_type = 4;
  if (has_body_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->body_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMessage_MessageHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seq(), target);
  }

  // required .GameMessage.GameMessage.ClientType client_type = 2 [default = PC];
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->client_type(), target);
  }

  // required uint32 body_size = 3;
  if (has_body_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->body_size(), target);
  }

  // required uint32 body_type = 4;
  if (has_body_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->body_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMessage_MessageHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

    // required .GameMessage.GameMessage.ClientType client_type = 2 [default = PC];
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // required uint32 body_size = 3;
    if (has_body_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_size());
    }

    // required uint32 body_type = 4;
    if (has_body_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_MessageHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMessage_MessageHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMessage_MessageHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMessage_MessageHead::MergeFrom(const GameMessage_MessageHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_body_size()) {
      set_body_size(from.body_size());
    }
    if (from.has_body_type()) {
      set_body_type(from.body_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMessage_MessageHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_MessageHead::CopyFrom(const GameMessage_MessageHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_MessageHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameMessage_MessageHead::Swap(GameMessage_MessageHead* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(client_type_, other->client_type_);
    std::swap(body_size_, other->body_size_);
    std::swap(body_type_, other->body_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMessage_MessageHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_MessageHead_descriptor_;
  metadata.reflection = GameMessage_MessageHead_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

GameMessage_MessageBody::GameMessage_MessageBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMessage_MessageBody::InitAsDefaultInstance() {
}

GameMessage_MessageBody::GameMessage_MessageBody(const GameMessage_MessageBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMessage_MessageBody::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage_MessageBody::~GameMessage_MessageBody() {
  SharedDtor();
}

void GameMessage_MessageBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMessage_MessageBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage_MessageBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_MessageBody_descriptor_;
}

const GameMessage_MessageBody& GameMessage_MessageBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameMessage_MessageBody* GameMessage_MessageBody::default_instance_ = NULL;

GameMessage_MessageBody* GameMessage_MessageBody::New() const {
  return new GameMessage_MessageBody;
}

void GameMessage_MessageBody::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMessage_MessageBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((400u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GameMessage_MessageBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [50, 536870912)
  _extensions_.SerializeWithCachedSizes(
      50, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMessage_MessageBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [50, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMessage_MessageBody::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage_MessageBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMessage_MessageBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMessage_MessageBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMessage_MessageBody::MergeFrom(const GameMessage_MessageBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMessage_MessageBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_MessageBody::CopyFrom(const GameMessage_MessageBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_MessageBody::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void GameMessage_MessageBody::Swap(GameMessage_MessageBody* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata GameMessage_MessageBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_MessageBody_descriptor_;
  metadata.reflection = GameMessage_MessageBody_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameMessage::kMsgHeadFieldNumber;
const int GameMessage::kMsgBodyFieldNumber;
#endif  // !_MSC_VER

GameMessage::GameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMessage::InitAsDefaultInstance() {
  msg_head_ = const_cast< ::GameMessage::GameMessage_MessageHead*>(&::GameMessage::GameMessage_MessageHead::default_instance());
  msg_body_ = const_cast< ::GameMessage::GameMessage_MessageBody*>(&::GameMessage::GameMessage_MessageBody::default_instance());
}

GameMessage::GameMessage(const GameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_head_ = NULL;
  msg_body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage::~GameMessage() {
  SharedDtor();
}

void GameMessage::SharedDtor() {
  if (this != default_instance_) {
    delete msg_head_;
    delete msg_body_;
  }
}

void GameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_descriptor_;
}

const GameMessage& GameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameMessage* GameMessage::default_instance_ = NULL;

GameMessage* GameMessage::New() const {
  return new GameMessage;
}

void GameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_head()) {
      if (msg_head_ != NULL) msg_head_->::GameMessage::GameMessage_MessageHead::Clear();
    }
    if (has_msg_body()) {
      if (msg_body_ != NULL) msg_body_->::GameMessage::GameMessage_MessageBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameMessage.GameMessage.MessageHead msg_head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_body;
        break;
      }

      // required .GameMessage.GameMessage.MessageBody msg_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameMessage.GameMessage.MessageHead msg_head = 1;
  if (has_msg_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_head(), output);
  }

  // required .GameMessage.GameMessage.MessageBody msg_body = 2;
  if (has_msg_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GameMessage.GameMessage.MessageHead msg_head = 1;
  if (has_msg_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_head(), target);
  }

  // required .GameMessage.GameMessage.MessageBody msg_body = 2;
  if (has_msg_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameMessage.GameMessage.MessageHead msg_head = 1;
    if (has_msg_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_head());
    }

    // required .GameMessage.GameMessage.MessageBody msg_body = 2;
    if (has_msg_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMessage::MergeFrom(const GameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_head()) {
      mutable_msg_head()->::GameMessage::GameMessage_MessageHead::MergeFrom(from.msg_head());
    }
    if (from.has_msg_body()) {
      mutable_msg_body()->::GameMessage::GameMessage_MessageBody::MergeFrom(from.msg_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage::CopyFrom(const GameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_head()) {
    if (!this->msg_head().IsInitialized()) return false;
  }
  if (has_msg_body()) {
    if (!this->msg_body().IsInitialized()) return false;
  }
  return true;
}

void GameMessage::Swap(GameMessage* other) {
  if (other != this) {
    std::swap(msg_head_, other->msg_head_);
    std::swap(msg_body_, other->msg_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_descriptor_;
  metadata.reflection = GameMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Resource_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_Type_descriptor_;
}
bool Resource_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Resource_Type Resource::Crops;
const Resource_Type Resource::Berries;
const Resource_Type Resource::Fish;
const Resource_Type Resource::Bears;
const Resource_Type Resource::Mammoths;
const Resource_Type Resource::Type_MIN;
const Resource_Type Resource::Type_MAX;
const int Resource::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Resource::kTypeFieldNumber;
const int Resource::kCountFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  SharedDtor();
}

void Resource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameMessage.Resource.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::Resource_Type_IsValid(value)) {
            set_type(static_cast< ::GameMessage::Resource_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameMessage.Resource.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GameMessage.Resource.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameMessage.Resource.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerResource::kPlayerIdFieldNumber;
const int PlayerResource::kResourceListFieldNumber;
#endif  // !_MSC_VER

PlayerResource::PlayerResource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerResource::InitAsDefaultInstance() {
}

PlayerResource::PlayerResource(const PlayerResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerResource::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerResource::~PlayerResource() {
  SharedDtor();
}

void PlayerResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerResource_descriptor_;
}

const PlayerResource& PlayerResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerResource* PlayerResource::default_instance_ = NULL;

PlayerResource* PlayerResource::New() const {
  return new PlayerResource;
}

void PlayerResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  resource_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_list;
        break;
      }

      // repeated .GameMessage.Resource resource_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // repeated .GameMessage.Resource resource_list = 2;
  for (int i = 0; i < this->resource_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // repeated .GameMessage.Resource resource_list = 2;
  for (int i = 0; i < this->resource_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  // repeated .GameMessage.Resource resource_list = 2;
  total_size += 1 * this->resource_list_size();
  for (int i = 0; i < this->resource_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerResource::MergeFrom(const PlayerResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_list_.MergeFrom(from.resource_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResource::CopyFrom(const PlayerResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < resource_list_size(); i++) {
    if (!this->resource_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerResource::Swap(PlayerResource* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    resource_list_.Swap(&other->resource_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerResource_descriptor_;
  metadata.reflection = PlayerResource_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerGamGeneralActionNotify_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGamGeneralActionNotify_Type_descriptor_;
}
bool PlayerGamGeneralActionNotify_Type_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerGamGeneralActionNotify_Type PlayerGamGeneralActionNotify::ENTER_PREPARATION_STEP;
const PlayerGamGeneralActionNotify_Type PlayerGamGeneralActionNotify::Type_MIN;
const PlayerGamGeneralActionNotify_Type PlayerGamGeneralActionNotify::Type_MAX;
const int PlayerGamGeneralActionNotify::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerGamGeneralActionNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

PlayerGamGeneralActionNotify::PlayerGamGeneralActionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGamGeneralActionNotify::InitAsDefaultInstance() {
}

PlayerGamGeneralActionNotify::PlayerGamGeneralActionNotify(const PlayerGamGeneralActionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGamGeneralActionNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGamGeneralActionNotify::~PlayerGamGeneralActionNotify() {
  SharedDtor();
}

void PlayerGamGeneralActionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerGamGeneralActionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGamGeneralActionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGamGeneralActionNotify_descriptor_;
}

const PlayerGamGeneralActionNotify& PlayerGamGeneralActionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerGamGeneralActionNotify* PlayerGamGeneralActionNotify::default_instance_ = NULL;

PlayerGamGeneralActionNotify* PlayerGamGeneralActionNotify::New() const {
  return new PlayerGamGeneralActionNotify;
}

void PlayerGamGeneralActionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGamGeneralActionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameMessage.PlayerGamGeneralActionNotify.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::PlayerGamGeneralActionNotify_Type_IsValid(value)) {
            set_type(static_cast< ::GameMessage::PlayerGamGeneralActionNotify_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGamGeneralActionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameMessage.PlayerGamGeneralActionNotify.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGamGeneralActionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GameMessage.PlayerGamGeneralActionNotify.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGamGeneralActionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameMessage.PlayerGamGeneralActionNotify.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGamGeneralActionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGamGeneralActionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGamGeneralActionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGamGeneralActionNotify::MergeFrom(const PlayerGamGeneralActionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGamGeneralActionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGamGeneralActionNotify::CopyFrom(const PlayerGamGeneralActionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGamGeneralActionNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerGamGeneralActionNotify::Swap(PlayerGamGeneralActionNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerGamGeneralActionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGamGeneralActionNotify_descriptor_;
  metadata.reflection = PlayerGamGeneralActionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEnterGameNotify::kPlayerCountFieldNumber;
const int PlayerEnterGameNotify::kPlayerIdsFieldNumber;
const int PlayerEnterGameNotify::kCardIdsFieldNumber;
const int PlayerEnterGameNotify::kFoodTokensFieldNumber;
const int PlayerEnterGameNotify::kResourceInHarvestFieldNumber;
const int PlayerEnterGameNotify::kResourceInBankFieldNumber;
#endif  // !_MSC_VER

PlayerEnterGameNotify::PlayerEnterGameNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEnterGameNotify::InitAsDefaultInstance() {
}

PlayerEnterGameNotify::PlayerEnterGameNotify(const PlayerEnterGameNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnterGameNotify::SharedCtor() {
  _cached_size_ = 0;
  player_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnterGameNotify::~PlayerEnterGameNotify() {
  SharedDtor();
}

void PlayerEnterGameNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEnterGameNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterGameNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEnterGameNotify_descriptor_;
}

const PlayerEnterGameNotify& PlayerEnterGameNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerEnterGameNotify* PlayerEnterGameNotify::default_instance_ = NULL;

PlayerEnterGameNotify* PlayerEnterGameNotify::New() const {
  return new PlayerEnterGameNotify;
}

void PlayerEnterGameNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_count_ = 0u;
  }
  player_ids_.Clear();
  card_ids_.Clear();
  food_tokens_.Clear();
  resource_in_harvest_.Clear();
  resource_in_bank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEnterGameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_ids;
        break;
      }

      // repeated uint64 player_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_player_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_ids;
        if (input->ExpectTag(24)) goto parse_card_ids;
        break;
      }

      // repeated uint32 card_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_card_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_ids;
        if (input->ExpectTag(32)) goto parse_food_tokens;
        break;
      }

      // repeated uint32 food_tokens = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_food_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_food_tokens())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_food_tokens())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_food_tokens;
        if (input->ExpectTag(42)) goto parse_resource_in_harvest;
        break;
      }

      // repeated .GameMessage.Resource resource_in_harvest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_in_harvest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_in_harvest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resource_in_harvest;
        if (input->ExpectTag(50)) goto parse_resource_in_bank;
        break;
      }

      // repeated .GameMessage.Resource resource_in_bank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_in_bank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_in_bank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_resource_in_bank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEnterGameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 player_count = 1;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_count(), output);
  }

  // repeated uint64 player_ids = 2;
  for (int i = 0; i < this->player_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_ids(i), output);
  }

  // repeated uint32 card_ids = 3;
  for (int i = 0; i < this->card_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->card_ids(i), output);
  }

  // repeated uint32 food_tokens = 4;
  for (int i = 0; i < this->food_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->food_tokens(i), output);
  }

  // repeated .GameMessage.Resource resource_in_harvest = 5;
  for (int i = 0; i < this->resource_in_harvest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->resource_in_harvest(i), output);
  }

  // repeated .GameMessage.Resource resource_in_bank = 6;
  for (int i = 0; i < this->resource_in_bank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resource_in_bank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEnterGameNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 player_count = 1;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_count(), target);
  }

  // repeated uint64 player_ids = 2;
  for (int i = 0; i < this->player_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->player_ids(i), target);
  }

  // repeated uint32 card_ids = 3;
  for (int i = 0; i < this->card_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->card_ids(i), target);
  }

  // repeated uint32 food_tokens = 4;
  for (int i = 0; i < this->food_tokens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->food_tokens(i), target);
  }

  // repeated .GameMessage.Resource resource_in_harvest = 5;
  for (int i = 0; i < this->resource_in_harvest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->resource_in_harvest(i), target);
  }

  // repeated .GameMessage.Resource resource_in_bank = 6;
  for (int i = 0; i < this->resource_in_bank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->resource_in_bank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEnterGameNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_count = 1;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_count());
    }

  }
  // repeated uint64 player_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->player_ids(i));
    }
    total_size += 1 * this->player_ids_size() + data_size;
  }

  // repeated uint32 card_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_ids(i));
    }
    total_size += 1 * this->card_ids_size() + data_size;
  }

  // repeated uint32 food_tokens = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->food_tokens_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->food_tokens(i));
    }
    total_size += 1 * this->food_tokens_size() + data_size;
  }

  // repeated .GameMessage.Resource resource_in_harvest = 5;
  total_size += 1 * this->resource_in_harvest_size();
  for (int i = 0; i < this->resource_in_harvest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_in_harvest(i));
  }

  // repeated .GameMessage.Resource resource_in_bank = 6;
  total_size += 1 * this->resource_in_bank_size();
  for (int i = 0; i < this->resource_in_bank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_in_bank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEnterGameNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEnterGameNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEnterGameNotify::MergeFrom(const PlayerEnterGameNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_ids_.MergeFrom(from.player_ids_);
  card_ids_.MergeFrom(from.card_ids_);
  food_tokens_.MergeFrom(from.food_tokens_);
  resource_in_harvest_.MergeFrom(from.resource_in_harvest_);
  resource_in_bank_.MergeFrom(from.resource_in_bank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEnterGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterGameNotify::CopyFrom(const PlayerEnterGameNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterGameNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < resource_in_harvest_size(); i++) {
    if (!this->resource_in_harvest(i).IsInitialized()) return false;
  }
  for (int i = 0; i < resource_in_bank_size(); i++) {
    if (!this->resource_in_bank(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerEnterGameNotify::Swap(PlayerEnterGameNotify* other) {
  if (other != this) {
    std::swap(player_count_, other->player_count_);
    player_ids_.Swap(&other->player_ids_);
    card_ids_.Swap(&other->card_ids_);
    food_tokens_.Swap(&other->food_tokens_);
    resource_in_harvest_.Swap(&other->resource_in_harvest_);
    resource_in_bank_.Swap(&other->resource_in_bank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEnterGameNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEnterGameNotify_descriptor_;
  metadata.reflection = PlayerEnterGameNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerChooseGameBoardReq_Angle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerChooseGameBoardReq_Angle_descriptor_;
}
bool PlayerChooseGameBoardReq_Angle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::R0;
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::R60;
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::R120;
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::R180;
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::R240;
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::R300;
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::Angle_MIN;
const PlayerChooseGameBoardReq_Angle PlayerChooseGameBoardReq::Angle_MAX;
const int PlayerChooseGameBoardReq::Angle_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerChooseGameBoardReq::kPlayerIdFieldNumber;
const int PlayerChooseGameBoardReq::kGameboardIdFieldNumber;
const int PlayerChooseGameBoardReq::kPosXFieldNumber;
const int PlayerChooseGameBoardReq::kPosYFieldNumber;
const int PlayerChooseGameBoardReq::kAngleFieldNumber;
#endif  // !_MSC_VER

PlayerChooseGameBoardReq::PlayerChooseGameBoardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerChooseGameBoardReq::InitAsDefaultInstance() {
}

PlayerChooseGameBoardReq::PlayerChooseGameBoardReq(const PlayerChooseGameBoardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerChooseGameBoardReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  gameboard_id_ = 0u;
  pos_x_ = 0u;
  pos_y_ = 0u;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerChooseGameBoardReq::~PlayerChooseGameBoardReq() {
  SharedDtor();
}

void PlayerChooseGameBoardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerChooseGameBoardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerChooseGameBoardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerChooseGameBoardReq_descriptor_;
}

const PlayerChooseGameBoardReq& PlayerChooseGameBoardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerChooseGameBoardReq* PlayerChooseGameBoardReq::default_instance_ = NULL;

PlayerChooseGameBoardReq* PlayerChooseGameBoardReq::New() const {
  return new PlayerChooseGameBoardReq;
}

void PlayerChooseGameBoardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    gameboard_id_ = 0u;
    pos_x_ = 0u;
    pos_y_ = 0u;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerChooseGameBoardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameboard_id;
        break;
      }

      // required uint32 gameboard_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameboard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameboard_id_)));
          set_has_gameboard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // required uint32 pos_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // required uint32 pos_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_angle;
        break;
      }

      // required .GameMessage.PlayerChooseGameBoardReq.Angle angle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::PlayerChooseGameBoardReq_Angle_IsValid(value)) {
            set_angle(static_cast< ::GameMessage::PlayerChooseGameBoardReq_Angle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerChooseGameBoardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required uint32 gameboard_id = 2;
  if (has_gameboard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameboard_id(), output);
  }

  // required uint32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos_x(), output);
  }

  // required uint32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos_y(), output);
  }

  // required .GameMessage.PlayerChooseGameBoardReq.Angle angle = 5;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerChooseGameBoardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required uint32 gameboard_id = 2;
  if (has_gameboard_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameboard_id(), target);
  }

  // required uint32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos_x(), target);
  }

  // required uint32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos_y(), target);
  }

  // required .GameMessage.PlayerChooseGameBoardReq.Angle angle = 5;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerChooseGameBoardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required uint32 gameboard_id = 2;
    if (has_gameboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameboard_id());
    }

    // required uint32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_x());
    }

    // required uint32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_y());
    }

    // required .GameMessage.PlayerChooseGameBoardReq.Angle angle = 5;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerChooseGameBoardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerChooseGameBoardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerChooseGameBoardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerChooseGameBoardReq::MergeFrom(const PlayerChooseGameBoardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gameboard_id()) {
      set_gameboard_id(from.gameboard_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerChooseGameBoardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChooseGameBoardReq::CopyFrom(const PlayerChooseGameBoardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChooseGameBoardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PlayerChooseGameBoardReq::Swap(PlayerChooseGameBoardReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gameboard_id_, other->gameboard_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerChooseGameBoardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerChooseGameBoardReq_descriptor_;
  metadata.reflection = PlayerChooseGameBoardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerChooseGameBoardNotify::kNextPlayerIdFieldNumber;
const int PlayerChooseGameBoardNotify::kPlayerChooseFieldNumber;
#endif  // !_MSC_VER

PlayerChooseGameBoardNotify::PlayerChooseGameBoardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerChooseGameBoardNotify::InitAsDefaultInstance() {
  player_choose_ = const_cast< ::GameMessage::PlayerChooseGameBoardReq*>(&::GameMessage::PlayerChooseGameBoardReq::default_instance());
}

PlayerChooseGameBoardNotify::PlayerChooseGameBoardNotify(const PlayerChooseGameBoardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerChooseGameBoardNotify::SharedCtor() {
  _cached_size_ = 0;
  next_player_id_ = GOOGLE_ULONGLONG(0);
  player_choose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerChooseGameBoardNotify::~PlayerChooseGameBoardNotify() {
  SharedDtor();
}

void PlayerChooseGameBoardNotify::SharedDtor() {
  if (this != default_instance_) {
    delete player_choose_;
  }
}

void PlayerChooseGameBoardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerChooseGameBoardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerChooseGameBoardNotify_descriptor_;
}

const PlayerChooseGameBoardNotify& PlayerChooseGameBoardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerChooseGameBoardNotify* PlayerChooseGameBoardNotify::default_instance_ = NULL;

PlayerChooseGameBoardNotify* PlayerChooseGameBoardNotify::New() const {
  return new PlayerChooseGameBoardNotify;
}

void PlayerChooseGameBoardNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    next_player_id_ = GOOGLE_ULONGLONG(0);
    if (has_player_choose()) {
      if (player_choose_ != NULL) player_choose_->::GameMessage::PlayerChooseGameBoardReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerChooseGameBoardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 next_player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_player_id_)));
          set_has_next_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_choose;
        break;
      }

      // optional .GameMessage.PlayerChooseGameBoardReq player_choose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_choose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_choose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerChooseGameBoardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 next_player_id = 1;
  if (has_next_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->next_player_id(), output);
  }

  // optional .GameMessage.PlayerChooseGameBoardReq player_choose = 2;
  if (has_player_choose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_choose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerChooseGameBoardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 next_player_id = 1;
  if (has_next_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->next_player_id(), target);
  }

  // optional .GameMessage.PlayerChooseGameBoardReq player_choose = 2;
  if (has_player_choose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_choose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerChooseGameBoardNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 next_player_id = 1;
    if (has_next_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_player_id());
    }

    // optional .GameMessage.PlayerChooseGameBoardReq player_choose = 2;
    if (has_player_choose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_choose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerChooseGameBoardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerChooseGameBoardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerChooseGameBoardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerChooseGameBoardNotify::MergeFrom(const PlayerChooseGameBoardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_next_player_id()) {
      set_next_player_id(from.next_player_id());
    }
    if (from.has_player_choose()) {
      mutable_player_choose()->::GameMessage::PlayerChooseGameBoardReq::MergeFrom(from.player_choose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerChooseGameBoardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerChooseGameBoardNotify::CopyFrom(const PlayerChooseGameBoardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChooseGameBoardNotify::IsInitialized() const {

  if (has_player_choose()) {
    if (!this->player_choose().IsInitialized()) return false;
  }
  return true;
}

void PlayerChooseGameBoardNotify::Swap(PlayerChooseGameBoardNotify* other) {
  if (other != this) {
    std::swap(next_player_id_, other->next_player_id_);
    std::swap(player_choose_, other->player_choose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerChooseGameBoardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerChooseGameBoardNotify_descriptor_;
  metadata.reflection = PlayerChooseGameBoardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHarvestAreaUpdateNotify::kResourceIncreasementFieldNumber;
#endif  // !_MSC_VER

PlayerHarvestAreaUpdateNotify::PlayerHarvestAreaUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHarvestAreaUpdateNotify::InitAsDefaultInstance() {
}

PlayerHarvestAreaUpdateNotify::PlayerHarvestAreaUpdateNotify(const PlayerHarvestAreaUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHarvestAreaUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHarvestAreaUpdateNotify::~PlayerHarvestAreaUpdateNotify() {
  SharedDtor();
}

void PlayerHarvestAreaUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHarvestAreaUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHarvestAreaUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHarvestAreaUpdateNotify_descriptor_;
}

const PlayerHarvestAreaUpdateNotify& PlayerHarvestAreaUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerHarvestAreaUpdateNotify* PlayerHarvestAreaUpdateNotify::default_instance_ = NULL;

PlayerHarvestAreaUpdateNotify* PlayerHarvestAreaUpdateNotify::New() const {
  return new PlayerHarvestAreaUpdateNotify;
}

void PlayerHarvestAreaUpdateNotify::Clear() {
  resource_increasement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHarvestAreaUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameMessage.Resource resource_increasement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_increasement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_increasement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resource_increasement;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHarvestAreaUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GameMessage.Resource resource_increasement = 1;
  for (int i = 0; i < this->resource_increasement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource_increasement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHarvestAreaUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GameMessage.Resource resource_increasement = 1;
  for (int i = 0; i < this->resource_increasement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource_increasement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHarvestAreaUpdateNotify::ByteSize() const {
  int total_size = 0;

  // repeated .GameMessage.Resource resource_increasement = 1;
  total_size += 1 * this->resource_increasement_size();
  for (int i = 0; i < this->resource_increasement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_increasement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHarvestAreaUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHarvestAreaUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHarvestAreaUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHarvestAreaUpdateNotify::MergeFrom(const PlayerHarvestAreaUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_increasement_.MergeFrom(from.resource_increasement_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHarvestAreaUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHarvestAreaUpdateNotify::CopyFrom(const PlayerHarvestAreaUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHarvestAreaUpdateNotify::IsInitialized() const {

  for (int i = 0; i < resource_increasement_size(); i++) {
    if (!this->resource_increasement(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerHarvestAreaUpdateNotify::Swap(PlayerHarvestAreaUpdateNotify* other) {
  if (other != this) {
    resource_increasement_.Swap(&other->resource_increasement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHarvestAreaUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHarvestAreaUpdateNotify_descriptor_;
  metadata.reflection = PlayerHarvestAreaUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAuctionMessageReq::kPlayerIdFieldNumber;
const int PlayerAuctionMessageReq::kAuctionCardIndexFieldNumber;
const int PlayerAuctionMessageReq::kAuctionIsGiveupFieldNumber;
#endif  // !_MSC_VER

PlayerAuctionMessageReq::PlayerAuctionMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAuctionMessageReq::InitAsDefaultInstance() {
}

PlayerAuctionMessageReq::PlayerAuctionMessageReq(const PlayerAuctionMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAuctionMessageReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  auction_card_index_ = 0u;
  auction_is_giveup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAuctionMessageReq::~PlayerAuctionMessageReq() {
  SharedDtor();
}

void PlayerAuctionMessageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAuctionMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAuctionMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAuctionMessageReq_descriptor_;
}

const PlayerAuctionMessageReq& PlayerAuctionMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerAuctionMessageReq* PlayerAuctionMessageReq::default_instance_ = NULL;

PlayerAuctionMessageReq* PlayerAuctionMessageReq::New() const {
  return new PlayerAuctionMessageReq;
}

void PlayerAuctionMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    auction_card_index_ = 0u;
    auction_is_giveup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAuctionMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auction_card_index;
        break;
      }

      // required uint32 auction_card_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auction_card_index_)));
          set_has_auction_card_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auction_is_giveup;
        break;
      }

      // optional bool auction_is_giveup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_is_giveup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auction_is_giveup_)));
          set_has_auction_is_giveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAuctionMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required uint32 auction_card_index = 2;
  if (has_auction_card_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auction_card_index(), output);
  }

  // optional bool auction_is_giveup = 3;
  if (has_auction_is_giveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auction_is_giveup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAuctionMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required uint32 auction_card_index = 2;
  if (has_auction_card_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auction_card_index(), target);
  }

  // optional bool auction_is_giveup = 3;
  if (has_auction_is_giveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auction_is_giveup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAuctionMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required uint32 auction_card_index = 2;
    if (has_auction_card_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auction_card_index());
    }

    // optional bool auction_is_giveup = 3;
    if (has_auction_is_giveup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAuctionMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAuctionMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAuctionMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAuctionMessageReq::MergeFrom(const PlayerAuctionMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_auction_card_index()) {
      set_auction_card_index(from.auction_card_index());
    }
    if (from.has_auction_is_giveup()) {
      set_auction_is_giveup(from.auction_is_giveup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAuctionMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAuctionMessageReq::CopyFrom(const PlayerAuctionMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAuctionMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerAuctionMessageReq::Swap(PlayerAuctionMessageReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(auction_card_index_, other->auction_card_index_);
    std::swap(auction_is_giveup_, other->auction_is_giveup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAuctionMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAuctionMessageReq_descriptor_;
  metadata.reflection = PlayerAuctionMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAuctionBroadcast::kPlayerIdFieldNumber;
const int PlayerAuctionBroadcast::kAuctionCardIndexFieldNumber;
const int PlayerAuctionBroadcast::kAuctionCardDealFieldNumber;
const int PlayerAuctionBroadcast::kAuctionCardGiveupFieldNumber;
#endif  // !_MSC_VER

PlayerAuctionBroadcast::PlayerAuctionBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAuctionBroadcast::InitAsDefaultInstance() {
}

PlayerAuctionBroadcast::PlayerAuctionBroadcast(const PlayerAuctionBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAuctionBroadcast::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  auction_card_index_ = 0u;
  auction_card_deal_ = false;
  auction_card_giveup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAuctionBroadcast::~PlayerAuctionBroadcast() {
  SharedDtor();
}

void PlayerAuctionBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAuctionBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAuctionBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAuctionBroadcast_descriptor_;
}

const PlayerAuctionBroadcast& PlayerAuctionBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerAuctionBroadcast* PlayerAuctionBroadcast::default_instance_ = NULL;

PlayerAuctionBroadcast* PlayerAuctionBroadcast::New() const {
  return new PlayerAuctionBroadcast;
}

void PlayerAuctionBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    auction_card_index_ = 0u;
    auction_card_deal_ = false;
    auction_card_giveup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAuctionBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auction_card_index;
        break;
      }

      // required uint32 auction_card_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auction_card_index_)));
          set_has_auction_card_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auction_card_deal;
        break;
      }

      // required bool auction_card_deal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_card_deal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auction_card_deal_)));
          set_has_auction_card_deal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auction_card_giveup;
        break;
      }

      // required bool auction_card_giveup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_card_giveup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auction_card_giveup_)));
          set_has_auction_card_giveup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAuctionBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // required uint32 auction_card_index = 2;
  if (has_auction_card_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auction_card_index(), output);
  }

  // required bool auction_card_deal = 3;
  if (has_auction_card_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auction_card_deal(), output);
  }

  // required bool auction_card_giveup = 4;
  if (has_auction_card_giveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->auction_card_giveup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAuctionBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // required uint32 auction_card_index = 2;
  if (has_auction_card_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auction_card_index(), target);
  }

  // required bool auction_card_deal = 3;
  if (has_auction_card_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auction_card_deal(), target);
  }

  // required bool auction_card_giveup = 4;
  if (has_auction_card_giveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->auction_card_giveup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAuctionBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // required uint32 auction_card_index = 2;
    if (has_auction_card_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auction_card_index());
    }

    // required bool auction_card_deal = 3;
    if (has_auction_card_deal()) {
      total_size += 1 + 1;
    }

    // required bool auction_card_giveup = 4;
    if (has_auction_card_giveup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAuctionBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAuctionBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAuctionBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAuctionBroadcast::MergeFrom(const PlayerAuctionBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_auction_card_index()) {
      set_auction_card_index(from.auction_card_index());
    }
    if (from.has_auction_card_deal()) {
      set_auction_card_deal(from.auction_card_deal());
    }
    if (from.has_auction_card_giveup()) {
      set_auction_card_giveup(from.auction_card_giveup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAuctionBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAuctionBroadcast::CopyFrom(const PlayerAuctionBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAuctionBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlayerAuctionBroadcast::Swap(PlayerAuctionBroadcast* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(auction_card_index_, other->auction_card_index_);
    std::swap(auction_card_deal_, other->auction_card_deal_);
    std::swap(auction_card_giveup_, other->auction_card_giveup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAuctionBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAuctionBroadcast_descriptor_;
  metadata.reflection = PlayerAuctionBroadcast_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::GameMessage::GameMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::GameMessage::PlayerEnterGameNotify >, 11, false >
  player_enter_game_notify(kPlayerEnterGameNotifyFieldNumber, ::GameMessage::PlayerEnterGameNotify::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::GameMessage::GameMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::GameMessage::PlayerGamGeneralActionNotify >, 11, false >
  player_general_action_notify(kPlayerGeneralActionNotifyFieldNumber, ::GameMessage::PlayerGamGeneralActionNotify::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::GameMessage::GameMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::GameMessage::PlayerChooseGameBoardReq >, 11, false >
  player_choose_gameboard_req(kPlayerChooseGameboardReqFieldNumber, ::GameMessage::PlayerChooseGameBoardReq::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::GameMessage::GameMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::GameMessage::PlayerChooseGameBoardNotify >, 11, false >
  player_choose_gameboard_notify(kPlayerChooseGameboardNotifyFieldNumber, ::GameMessage::PlayerChooseGameBoardNotify::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::GameMessage::GameMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::GameMessage::PlayerHarvestAreaUpdateNotify >, 11, false >
  player_harvest_area_update_notify(kPlayerHarvestAreaUpdateNotifyFieldNumber, ::GameMessage::PlayerHarvestAreaUpdateNotify::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::GameMessage::GameMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::GameMessage::PlayerAuctionMessageReq >, 11, false >
  player_auction_message_req(kPlayerAuctionMessageReqFieldNumber, ::GameMessage::PlayerAuctionMessageReq::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::GameMessage::GameMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::GameMessage::PlayerAuctionBroadcast >, 11, false >
  player_auction_broadcast(kPlayerAuctionBroadcastFieldNumber, ::GameMessage::PlayerAuctionBroadcast::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage

// @@protoc_insertion_point(global_scope)
