// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScheduleMessage.proto

#ifndef PROTOBUF_ScheduleMessage_2eproto__INCLUDED
#define PROTOBUF_ScheduleMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ScheduleMessage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ScheduleMessage_2eproto();
void protobuf_AssignDesc_ScheduleMessage_2eproto();
void protobuf_ShutdownFile_ScheduleMessage_2eproto();

class ScheduleMessage;
class ScheduleMessage_MessageBody;
class BasicScheduleEvent;

enum ScheduleMessage_MessageType {
  ScheduleMessage_MessageType_BasicScheduleEvent = 50
};
bool ScheduleMessage_MessageType_IsValid(int value);
const ScheduleMessage_MessageType ScheduleMessage_MessageType_MessageType_MIN = ScheduleMessage_MessageType_BasicScheduleEvent;
const ScheduleMessage_MessageType ScheduleMessage_MessageType_MessageType_MAX = ScheduleMessage_MessageType_BasicScheduleEvent;
const int ScheduleMessage_MessageType_MessageType_ARRAYSIZE = ScheduleMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScheduleMessage_MessageType_descriptor();
inline const ::std::string& ScheduleMessage_MessageType_Name(ScheduleMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScheduleMessage_MessageType_descriptor(), value);
}
inline bool ScheduleMessage_MessageType_Parse(
    const ::std::string& name, ScheduleMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScheduleMessage_MessageType>(
    ScheduleMessage_MessageType_descriptor(), name, value);
}
enum BasicScheduleEvent_BasicEventType {
  BasicScheduleEvent_BasicEventType_ENTER_STEP = 1,
  BasicScheduleEvent_BasicEventType_LEAVE_STEP = 2
};
bool BasicScheduleEvent_BasicEventType_IsValid(int value);
const BasicScheduleEvent_BasicEventType BasicScheduleEvent_BasicEventType_BasicEventType_MIN = BasicScheduleEvent_BasicEventType_ENTER_STEP;
const BasicScheduleEvent_BasicEventType BasicScheduleEvent_BasicEventType_BasicEventType_MAX = BasicScheduleEvent_BasicEventType_LEAVE_STEP;
const int BasicScheduleEvent_BasicEventType_BasicEventType_ARRAYSIZE = BasicScheduleEvent_BasicEventType_BasicEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BasicScheduleEvent_BasicEventType_descriptor();
inline const ::std::string& BasicScheduleEvent_BasicEventType_Name(BasicScheduleEvent_BasicEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BasicScheduleEvent_BasicEventType_descriptor(), value);
}
inline bool BasicScheduleEvent_BasicEventType_Parse(
    const ::std::string& name, BasicScheduleEvent_BasicEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BasicScheduleEvent_BasicEventType>(
    BasicScheduleEvent_BasicEventType_descriptor(), name, value);
}
// ===================================================================

class ScheduleMessage_MessageBody : public ::google::protobuf::Message {
 public:
  ScheduleMessage_MessageBody();
  virtual ~ScheduleMessage_MessageBody();

  ScheduleMessage_MessageBody(const ScheduleMessage_MessageBody& from);

  inline ScheduleMessage_MessageBody& operator=(const ScheduleMessage_MessageBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleMessage_MessageBody& default_instance();

  void Swap(ScheduleMessage_MessageBody* other);

  // implements Message ----------------------------------------------

  ScheduleMessage_MessageBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScheduleMessage_MessageBody& from);
  void MergeFrom(const ScheduleMessage_MessageBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ScheduleMessage_MessageBody)
  // @@protoc_insertion_point(class_scope:ScheduleMessage.ScheduleMessage.MessageBody)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ScheduleMessage_2eproto();
  friend void protobuf_AssignDesc_ScheduleMessage_2eproto();
  friend void protobuf_ShutdownFile_ScheduleMessage_2eproto();

  void InitAsDefaultInstance();
  static ScheduleMessage_MessageBody* default_instance_;
};
// -------------------------------------------------------------------

class ScheduleMessage : public ::google::protobuf::Message {
 public:
  ScheduleMessage();
  virtual ~ScheduleMessage();

  ScheduleMessage(const ScheduleMessage& from);

  inline ScheduleMessage& operator=(const ScheduleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleMessage& default_instance();

  void Swap(ScheduleMessage* other);

  // implements Message ----------------------------------------------

  ScheduleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScheduleMessage& from);
  void MergeFrom(const ScheduleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ScheduleMessage_MessageBody MessageBody;

  typedef ScheduleMessage_MessageType MessageType;
  static const MessageType BasicScheduleEvent = ScheduleMessage_MessageType_BasicScheduleEvent;
  static inline bool MessageType_IsValid(int value) {
    return ScheduleMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    ScheduleMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    ScheduleMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    ScheduleMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return ScheduleMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return ScheduleMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return ScheduleMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ScheduleMessage.ScheduleMessage.MessageType msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline ::ScheduleMessage::ScheduleMessage_MessageType msg_type() const;
  inline void set_msg_type(::ScheduleMessage::ScheduleMessage_MessageType value);

  // required .ScheduleMessage.ScheduleMessage.MessageBody msg_body = 2;
  inline bool has_msg_body() const;
  inline void clear_msg_body();
  static const int kMsgBodyFieldNumber = 2;
  inline const ::ScheduleMessage::ScheduleMessage_MessageBody& msg_body() const;
  inline ::ScheduleMessage::ScheduleMessage_MessageBody* mutable_msg_body();
  inline ::ScheduleMessage::ScheduleMessage_MessageBody* release_msg_body();
  inline void set_allocated_msg_body(::ScheduleMessage::ScheduleMessage_MessageBody* msg_body);

  // @@protoc_insertion_point(class_scope:ScheduleMessage.ScheduleMessage)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_body();
  inline void clear_has_msg_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ScheduleMessage::ScheduleMessage_MessageBody* msg_body_;
  int msg_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ScheduleMessage_2eproto();
  friend void protobuf_AssignDesc_ScheduleMessage_2eproto();
  friend void protobuf_ShutdownFile_ScheduleMessage_2eproto();

  void InitAsDefaultInstance();
  static ScheduleMessage* default_instance_;
};
// -------------------------------------------------------------------

class BasicScheduleEvent : public ::google::protobuf::Message {
 public:
  BasicScheduleEvent();
  virtual ~BasicScheduleEvent();

  BasicScheduleEvent(const BasicScheduleEvent& from);

  inline BasicScheduleEvent& operator=(const BasicScheduleEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicScheduleEvent& default_instance();

  void Swap(BasicScheduleEvent* other);

  // implements Message ----------------------------------------------

  BasicScheduleEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicScheduleEvent& from);
  void MergeFrom(const BasicScheduleEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BasicScheduleEvent_BasicEventType BasicEventType;
  static const BasicEventType ENTER_STEP = BasicScheduleEvent_BasicEventType_ENTER_STEP;
  static const BasicEventType LEAVE_STEP = BasicScheduleEvent_BasicEventType_LEAVE_STEP;
  static inline bool BasicEventType_IsValid(int value) {
    return BasicScheduleEvent_BasicEventType_IsValid(value);
  }
  static const BasicEventType BasicEventType_MIN =
    BasicScheduleEvent_BasicEventType_BasicEventType_MIN;
  static const BasicEventType BasicEventType_MAX =
    BasicScheduleEvent_BasicEventType_BasicEventType_MAX;
  static const int BasicEventType_ARRAYSIZE =
    BasicScheduleEvent_BasicEventType_BasicEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BasicEventType_descriptor() {
    return BasicScheduleEvent_BasicEventType_descriptor();
  }
  static inline const ::std::string& BasicEventType_Name(BasicEventType value) {
    return BasicScheduleEvent_BasicEventType_Name(value);
  }
  static inline bool BasicEventType_Parse(const ::std::string& name,
      BasicEventType* value) {
    return BasicScheduleEvent_BasicEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ScheduleMessage.BasicScheduleEvent.BasicEventType basic_event_type = 1;
  inline bool has_basic_event_type() const;
  inline void clear_basic_event_type();
  static const int kBasicEventTypeFieldNumber = 1;
  inline ::ScheduleMessage::BasicScheduleEvent_BasicEventType basic_event_type() const;
  inline void set_basic_event_type(::ScheduleMessage::BasicScheduleEvent_BasicEventType value);

  // @@protoc_insertion_point(class_scope:ScheduleMessage.BasicScheduleEvent)
 private:
  inline void set_has_basic_event_type();
  inline void clear_has_basic_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int basic_event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ScheduleMessage_2eproto();
  friend void protobuf_AssignDesc_ScheduleMessage_2eproto();
  friend void protobuf_ShutdownFile_ScheduleMessage_2eproto();

  void InitAsDefaultInstance();
  static BasicScheduleEvent* default_instance_;
};
// ===================================================================

static const int kBasicScheduleEventFieldNumber = 50;
extern ::google::protobuf::internal::ExtensionIdentifier< ::ScheduleMessage::ScheduleMessage_MessageBody,
    ::google::protobuf::internal::MessageTypeTraits< ::ScheduleMessage::BasicScheduleEvent >, 11, false >
  basic_schedule_event;

// ===================================================================

// ScheduleMessage_MessageBody

// -------------------------------------------------------------------

// ScheduleMessage

// required .ScheduleMessage.ScheduleMessage.MessageType msg_type = 1;
inline bool ScheduleMessage::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScheduleMessage::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScheduleMessage::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScheduleMessage::clear_msg_type() {
  msg_type_ = 50;
  clear_has_msg_type();
}
inline ::ScheduleMessage::ScheduleMessage_MessageType ScheduleMessage::msg_type() const {
  return static_cast< ::ScheduleMessage::ScheduleMessage_MessageType >(msg_type_);
}
inline void ScheduleMessage::set_msg_type(::ScheduleMessage::ScheduleMessage_MessageType value) {
  assert(::ScheduleMessage::ScheduleMessage_MessageType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// required .ScheduleMessage.ScheduleMessage.MessageBody msg_body = 2;
inline bool ScheduleMessage::has_msg_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScheduleMessage::set_has_msg_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScheduleMessage::clear_has_msg_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScheduleMessage::clear_msg_body() {
  if (msg_body_ != NULL) msg_body_->::ScheduleMessage::ScheduleMessage_MessageBody::Clear();
  clear_has_msg_body();
}
inline const ::ScheduleMessage::ScheduleMessage_MessageBody& ScheduleMessage::msg_body() const {
  return msg_body_ != NULL ? *msg_body_ : *default_instance_->msg_body_;
}
inline ::ScheduleMessage::ScheduleMessage_MessageBody* ScheduleMessage::mutable_msg_body() {
  set_has_msg_body();
  if (msg_body_ == NULL) msg_body_ = new ::ScheduleMessage::ScheduleMessage_MessageBody;
  return msg_body_;
}
inline ::ScheduleMessage::ScheduleMessage_MessageBody* ScheduleMessage::release_msg_body() {
  clear_has_msg_body();
  ::ScheduleMessage::ScheduleMessage_MessageBody* temp = msg_body_;
  msg_body_ = NULL;
  return temp;
}
inline void ScheduleMessage::set_allocated_msg_body(::ScheduleMessage::ScheduleMessage_MessageBody* msg_body) {
  delete msg_body_;
  msg_body_ = msg_body;
  if (msg_body) {
    set_has_msg_body();
  } else {
    clear_has_msg_body();
  }
}

// -------------------------------------------------------------------

// BasicScheduleEvent

// optional .ScheduleMessage.BasicScheduleEvent.BasicEventType basic_event_type = 1;
inline bool BasicScheduleEvent::has_basic_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicScheduleEvent::set_has_basic_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicScheduleEvent::clear_has_basic_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicScheduleEvent::clear_basic_event_type() {
  basic_event_type_ = 1;
  clear_has_basic_event_type();
}
inline ::ScheduleMessage::BasicScheduleEvent_BasicEventType BasicScheduleEvent::basic_event_type() const {
  return static_cast< ::ScheduleMessage::BasicScheduleEvent_BasicEventType >(basic_event_type_);
}
inline void BasicScheduleEvent::set_basic_event_type(::ScheduleMessage::BasicScheduleEvent_BasicEventType value) {
  assert(::ScheduleMessage::BasicScheduleEvent_BasicEventType_IsValid(value));
  set_has_basic_event_type();
  basic_event_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ScheduleMessage

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ScheduleMessage::ScheduleMessage_MessageType>() {
  return ::ScheduleMessage::ScheduleMessage_MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ScheduleMessage::BasicScheduleEvent_BasicEventType>() {
  return ::ScheduleMessage::BasicScheduleEvent_BasicEventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ScheduleMessage_2eproto__INCLUDED
